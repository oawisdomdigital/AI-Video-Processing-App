{"ast":null,"code":"import React,{useState}from'react';import axios from'axios';import{ToastContainer,toast}from'react-toastify';import'react-toastify/dist/ReactToastify.css';import'./App.css';// Add CSS for loader and progress bar here\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{const[video,setVideo]=useState(null);const[processedVideo,setProcessedVideo]=useState(null);const[loading,setLoading]=useState(false);const[progress,setProgress]=useState(0);const[timeRemaining,setTimeRemaining]=useState(null);const handleFileChange=e=>{setVideo(e.target.files[0]);};const handleUpload=async()=>{if(!video){toast.error('Please upload a video!');return;}const formData=new FormData();formData.append('file',video);setLoading(true);setProgress(0);setTimeRemaining(null);try{const response=await axios.post('http://127.0.0.1:8000/api/videos/upload/',formData,{headers:{'Content-Type':'multipart/form-data'}});toast.success('Video uploaded successfully! Processing started.');const videoId=response.data.id;// Start polling for processing status\npollProcessingStatus(videoId);}catch(error){var _error$response;toast.error('Error uploading video!');console.error(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.data)||error.message);setLoading(false);}};const pollProcessingStatus=async videoId=>{try{const response=await axios.get(\"http://127.0.0.1:8000/api/videos/status/\".concat(videoId,\"/\"));const{progress,estimated_time_remaining,video_url,status}=response.data;setProgress(progress);setTimeRemaining(estimated_time_remaining);if(status==='completed'){toast.success('Processing completed successfully!');setProcessedVideo(video_url);setLoading(false);}else{// Poll again after 3 seconds\nsetTimeout(()=>pollProcessingStatus(videoId),3000);}}catch(error){console.error('Error fetching processing status:',error);toast.error('Error fetching processing status.');setLoading(false);}};return/*#__PURE__*/_jsxs(\"div\",{style:{padding:'20px'},children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Video Editor\"}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",onChange:handleFileChange,accept:\"video/mp4,video/x-m4v,video/*\"}),video&&/*#__PURE__*/_jsxs(\"p\",{children:[\"File: \",video.name,\" (\",(video.size/(1024*1024)).toFixed(2),\" MB)\"]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleUpload,disabled:loading,style:{marginTop:'10px'},children:loading?/*#__PURE__*/_jsx(\"div\",{className:\"loader\"}):'Upload and Process'}),loading&&/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'20px'},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:'100%',backgroundColor:'#f3f3f3',borderRadius:'5px',overflow:'hidden'},children:/*#__PURE__*/_jsx(\"div\",{style:{width:\"\".concat(progress,\"%\"),height:'10px',backgroundColor:'#4caf50'}})}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Processing Progress: \",progress,\"%\"]}),timeRemaining&&/*#__PURE__*/_jsxs(\"p\",{children:[\"Estimated Time Remaining: \",timeRemaining,\" seconds\"]})]}),processedVideo&&/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'20px'},children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Processed Video:\"}),/*#__PURE__*/_jsxs(\"video\",{controls:true,style:{maxWidth:'100%'},children:[/*#__PURE__*/_jsx(\"source\",{src:\"http://127.0.0.1:8000\".concat(processedVideo),type:\"video/mp4\"}),\"Your browser does not support the video tag.\"]})]}),/*#__PURE__*/_jsx(ToastContainer,{})]});};export default App;","map":{"version":3,"names":["React","useState","axios","ToastContainer","toast","jsx","_jsx","jsxs","_jsxs","App","video","setVideo","processedVideo","setProcessedVideo","loading","setLoading","progress","setProgress","timeRemaining","setTimeRemaining","handleFileChange","e","target","files","handleUpload","error","formData","FormData","append","response","post","headers","success","videoId","data","id","pollProcessingStatus","_error$response","console","message","get","concat","estimated_time_remaining","video_url","status","setTimeout","style","padding","children","type","onChange","accept","name","size","toFixed","onClick","disabled","marginTop","className","width","backgroundColor","borderRadius","overflow","height","controls","maxWidth","src"],"sources":["C:/Users/USER/Desktop/video_editor/video-editor-frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './App.css'; // Add CSS for loader and progress bar here\n\nconst App = () => {\n  const [video, setVideo] = useState(null);\n  const [processedVideo, setProcessedVideo] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [timeRemaining, setTimeRemaining] = useState(null);\n\n  const handleFileChange = (e) => {\n    setVideo(e.target.files[0]);\n  };\n\n  const handleUpload = async () => {\n    if (!video) {\n      toast.error('Please upload a video!');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('file', video);\n\n    setLoading(true);\n    setProgress(0);\n    setTimeRemaining(null);\n\n    try {\n      const response = await axios.post('http://127.0.0.1:8000/api/videos/upload/', formData, {\n        headers: { 'Content-Type': 'multipart/form-data' },\n      });\n\n      toast.success('Video uploaded successfully! Processing started.');\n      const videoId = response.data.id;\n\n      // Start polling for processing status\n      pollProcessingStatus(videoId);\n    } catch (error) {\n      toast.error('Error uploading video!');\n      console.error(error.response?.data || error.message);\n      setLoading(false);\n    }\n  };\n\n  const pollProcessingStatus = async (videoId) => {\n    try {\n      const response = await axios.get(`http://127.0.0.1:8000/api/videos/status/${videoId}/`);\n      const { progress, estimated_time_remaining, video_url, status } = response.data;\n\n      setProgress(progress);\n      setTimeRemaining(estimated_time_remaining);\n\n      if (status === 'completed') {\n        toast.success('Processing completed successfully!');\n        setProcessedVideo(video_url);\n        setLoading(false);\n      } else {\n        // Poll again after 3 seconds\n        setTimeout(() => pollProcessingStatus(videoId), 3000);\n      }\n    } catch (error) {\n      console.error('Error fetching processing status:', error);\n      toast.error('Error fetching processing status.');\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>Video Editor</h1>\n\n      {/* File input for video */}\n      <input type=\"file\" onChange={handleFileChange} accept=\"video/mp4,video/x-m4v,video/*\" />\n\n      {/* Display selected file info */}\n      {video && (\n        <p>\n          File: {video.name} ({(video.size / (1024 * 1024)).toFixed(2)} MB)\n        </p>\n      )}\n\n      {/* Upload button */}\n      <button onClick={handleUpload} disabled={loading} style={{ marginTop: '10px' }}>\n        {loading ? <div className=\"loader\"></div> : 'Upload and Process'}\n      </button>\n\n      {/* Show progress and time remaining */}\n      {loading && (\n        <div style={{ marginTop: '20px' }}>\n          {/* Progress bar */}\n          <div\n            style={{\n              width: '100%',\n              backgroundColor: '#f3f3f3',\n              borderRadius: '5px',\n              overflow: 'hidden',\n            }}\n          >\n            <div\n              style={{\n                width: `${progress}%`,\n                height: '10px',\n                backgroundColor: '#4caf50',\n              }}\n            ></div>\n          </div>\n          <p>Processing Progress: {progress}%</p>\n          {timeRemaining && <p>Estimated Time Remaining: {timeRemaining} seconds</p>}\n        </div>\n      )}\n\n      {/* Display processed video */}\n      {processedVideo && (\n        <div style={{ marginTop: '20px' }}>\n          <h3>Processed Video:</h3>\n          <video controls style={{ maxWidth: '100%' }}>\n            <source src={`http://127.0.0.1:8000${processedVideo}`} type=\"video/mp4\" />\n            Your browser does not support the video tag.\n          </video>\n        </div>\n      )}\n\n      {/* Toast container for notifications */}\n      <ToastContainer />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}